# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lora_rts_cts_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lora_rts_cts_swig')
    _lora_rts_cts_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lora_rts_cts_swig', [dirname(__file__)])
        except ImportError:
            import _lora_rts_cts_swig
            return _lora_rts_cts_swig
        try:
            _mod = imp.load_module('_lora_rts_cts_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lora_rts_cts_swig = swig_import_helper()
    del swig_import_helper
else:
    import _lora_rts_cts_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now() -> "gr::high_res_timer_type":
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _lora_rts_cts_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _lora_rts_cts_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _lora_rts_cts_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _lora_rts_cts_swig.high_res_timer_epoch()
class RTSSender(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_rts_cts::RTSSender.

    To avoid accidental use of raw pointers, lora_rts_cts::RTSSender's constructor is in a private implementation class. lora_rts_cts::RTSSender::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make() -> "gr::lora_rts_cts::RTSSender::sptr":
        """
        make() -> RTSSender_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_rts_cts::RTSSender.

        To avoid accidental use of raw pointers, lora_rts_cts::RTSSender's constructor is in a private implementation class. lora_rts_cts::RTSSender::make is the public interface for creating new instances.
        """
        return _lora_rts_cts_swig.RTSSender_make()

    make = staticmethod(make)
    __swig_destroy__ = _lora_rts_cts_swig.delete_RTSSender
    __del__ = lambda self: None
RTSSender_swigregister = _lora_rts_cts_swig.RTSSender_swigregister
RTSSender_swigregister(RTSSender)

def RTSSender_make() -> "gr::lora_rts_cts::RTSSender::sptr":
    """
    RTSSender_make() -> RTSSender_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_rts_cts::RTSSender.

    To avoid accidental use of raw pointers, lora_rts_cts::RTSSender's constructor is in a private implementation class. lora_rts_cts::RTSSender::make is the public interface for creating new instances.
    """
    return _lora_rts_cts_swig.RTSSender_make()

class RTSSender_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora_rts_cts::RTSSender)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora_rts_cts::RTSSender)> self) -> RTSSender_sptr
        __init__(boost::shared_ptr<(gr::lora_rts_cts::RTSSender)> self, RTSSender p) -> RTSSender_sptr
        """
        this = _lora_rts_cts_swig.new_RTSSender_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::lora_rts_cts::RTSSender *":
        """__deref__(RTSSender_sptr self) -> RTSSender"""
        return _lora_rts_cts_swig.RTSSender_sptr___deref__(self)

    __swig_destroy__ = _lora_rts_cts_swig.delete_RTSSender_sptr
    __del__ = lambda self: None

    def make(self) -> "gr::lora_rts_cts::RTSSender::sptr":
        """
        make(RTSSender_sptr self) -> RTSSender_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_rts_cts::RTSSender.

        To avoid accidental use of raw pointers, lora_rts_cts::RTSSender's constructor is in a private implementation class. lora_rts_cts::RTSSender::make is the public interface for creating new instances.
        """
        return _lora_rts_cts_swig.RTSSender_sptr_make(self)


    def history(self) -> "unsigned int":
        """history(RTSSender_sptr self) -> unsigned int"""
        return _lora_rts_cts_swig.RTSSender_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(RTSSender_sptr self, int which, int delay)
        declare_sample_delay(RTSSender_sptr self, unsigned int delay)
        """
        return _lora_rts_cts_swig.RTSSender_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(RTSSender_sptr self, int which) -> unsigned int"""
        return _lora_rts_cts_swig.RTSSender_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(RTSSender_sptr self, int multiple)"""
        return _lora_rts_cts_swig.RTSSender_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(RTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.RTSSender_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(RTSSender_sptr self) -> double"""
        return _lora_rts_cts_swig.RTSSender_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(RTSSender_sptr self) -> uint64_t"""
        return _lora_rts_cts_swig.RTSSender_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(RTSSender_sptr self) -> uint64_t"""
        return _lora_rts_cts_swig.RTSSender_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(RTSSender_sptr self) -> bool"""
        return _lora_rts_cts_swig.RTSSender_sptr_start(self)


    def stop(self) -> "bool":
        """stop(RTSSender_sptr self) -> bool"""
        return _lora_rts_cts_swig.RTSSender_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(RTSSender_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_rts_cts_swig.RTSSender_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(RTSSender_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_rts_cts_swig.RTSSender_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(RTSSender_sptr self, std::string level)"""
        return _lora_rts_cts_swig.RTSSender_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(RTSSender_sptr self) -> std::string"""
        return _lora_rts_cts_swig.RTSSender_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(RTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.RTSSender_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(RTSSender_sptr self, int m)"""
        return _lora_rts_cts_swig.RTSSender_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(RTSSender_sptr self)"""
        return _lora_rts_cts_swig.RTSSender_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(RTSSender_sptr self) -> bool"""
        return _lora_rts_cts_swig.RTSSender_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(RTSSender_sptr self, int m)"""
        return _lora_rts_cts_swig.RTSSender_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(RTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.RTSSender_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(RTSSender_sptr self, int i) -> long"""
        return _lora_rts_cts_swig.RTSSender_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(RTSSender_sptr self, long max_output_buffer)
        set_max_output_buffer(RTSSender_sptr self, int port, long max_output_buffer)
        """
        return _lora_rts_cts_swig.RTSSender_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(RTSSender_sptr self, int i) -> long"""
        return _lora_rts_cts_swig.RTSSender_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(RTSSender_sptr self, long min_output_buffer)
        set_min_output_buffer(RTSSender_sptr self, int port, long min_output_buffer)
        """
        return _lora_rts_cts_swig.RTSSender_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(RTSSender_sptr self, int which) -> float
        pc_input_buffers_full(RTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.RTSSender_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(RTSSender_sptr self, int which) -> float
        pc_input_buffers_full_avg(RTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.RTSSender_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(RTSSender_sptr self, int which) -> float
        pc_input_buffers_full_var(RTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.RTSSender_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(RTSSender_sptr self, int which) -> float
        pc_output_buffers_full(RTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.RTSSender_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(RTSSender_sptr self, int which) -> float
        pc_output_buffers_full_avg(RTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.RTSSender_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(RTSSender_sptr self, int which) -> float
        pc_output_buffers_full_var(RTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.RTSSender_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(RTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.RTSSender_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(RTSSender_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_rts_cts_swig.RTSSender_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(RTSSender_sptr self)"""
        return _lora_rts_cts_swig.RTSSender_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(RTSSender_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_rts_cts_swig.RTSSender_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(RTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.RTSSender_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(RTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.RTSSender_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(RTSSender_sptr self, int priority) -> int"""
        return _lora_rts_cts_swig.RTSSender_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(RTSSender_sptr self) -> std::string"""
        return _lora_rts_cts_swig.RTSSender_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(RTSSender_sptr self) -> std::string"""
        return _lora_rts_cts_swig.RTSSender_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(RTSSender_sptr self) -> io_signature_sptr"""
        return _lora_rts_cts_swig.RTSSender_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(RTSSender_sptr self) -> io_signature_sptr"""
        return _lora_rts_cts_swig.RTSSender_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(RTSSender_sptr self) -> long"""
        return _lora_rts_cts_swig.RTSSender_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(RTSSender_sptr self) -> basic_block_sptr"""
        return _lora_rts_cts_swig.RTSSender_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(RTSSender_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_rts_cts_swig.RTSSender_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(RTSSender_sptr self) -> std::string"""
        return _lora_rts_cts_swig.RTSSender_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(RTSSender_sptr self, std::string name)"""
        return _lora_rts_cts_swig.RTSSender_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(RTSSender_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_rts_cts_swig.RTSSender_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(RTSSender_sptr self) -> swig_pmt_ptr"""
        return _lora_rts_cts_swig.RTSSender_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(RTSSender_sptr self) -> swig_pmt_ptr"""
        return _lora_rts_cts_swig.RTSSender_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(RTSSender_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_rts_cts_swig.RTSSender_sptr_message_subscribers(self, which_port)

RTSSender_sptr_swigregister = _lora_rts_cts_swig.RTSSender_sptr_swigregister
RTSSender_sptr_swigregister(RTSSender_sptr)


RTSSender_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
RTSSender = RTSSender.make;

class CTSSender(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_rts_cts::CTSSender.

    To avoid accidental use of raw pointers, lora_rts_cts::CTSSender's constructor is in a private implementation class. lora_rts_cts::CTSSender::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make() -> "gr::lora_rts_cts::CTSSender::sptr":
        """
        make() -> CTSSender_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_rts_cts::CTSSender.

        To avoid accidental use of raw pointers, lora_rts_cts::CTSSender's constructor is in a private implementation class. lora_rts_cts::CTSSender::make is the public interface for creating new instances.
        """
        return _lora_rts_cts_swig.CTSSender_make()

    make = staticmethod(make)
    __swig_destroy__ = _lora_rts_cts_swig.delete_CTSSender
    __del__ = lambda self: None
CTSSender_swigregister = _lora_rts_cts_swig.CTSSender_swigregister
CTSSender_swigregister(CTSSender)

def CTSSender_make() -> "gr::lora_rts_cts::CTSSender::sptr":
    """
    CTSSender_make() -> CTSSender_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_rts_cts::CTSSender.

    To avoid accidental use of raw pointers, lora_rts_cts::CTSSender's constructor is in a private implementation class. lora_rts_cts::CTSSender::make is the public interface for creating new instances.
    """
    return _lora_rts_cts_swig.CTSSender_make()

class CTSSender_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora_rts_cts::CTSSender)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora_rts_cts::CTSSender)> self) -> CTSSender_sptr
        __init__(boost::shared_ptr<(gr::lora_rts_cts::CTSSender)> self, CTSSender p) -> CTSSender_sptr
        """
        this = _lora_rts_cts_swig.new_CTSSender_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::lora_rts_cts::CTSSender *":
        """__deref__(CTSSender_sptr self) -> CTSSender"""
        return _lora_rts_cts_swig.CTSSender_sptr___deref__(self)

    __swig_destroy__ = _lora_rts_cts_swig.delete_CTSSender_sptr
    __del__ = lambda self: None

    def make(self) -> "gr::lora_rts_cts::CTSSender::sptr":
        """
        make(CTSSender_sptr self) -> CTSSender_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_rts_cts::CTSSender.

        To avoid accidental use of raw pointers, lora_rts_cts::CTSSender's constructor is in a private implementation class. lora_rts_cts::CTSSender::make is the public interface for creating new instances.
        """
        return _lora_rts_cts_swig.CTSSender_sptr_make(self)


    def history(self) -> "unsigned int":
        """history(CTSSender_sptr self) -> unsigned int"""
        return _lora_rts_cts_swig.CTSSender_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(CTSSender_sptr self, int which, int delay)
        declare_sample_delay(CTSSender_sptr self, unsigned int delay)
        """
        return _lora_rts_cts_swig.CTSSender_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(CTSSender_sptr self, int which) -> unsigned int"""
        return _lora_rts_cts_swig.CTSSender_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(CTSSender_sptr self, int multiple)"""
        return _lora_rts_cts_swig.CTSSender_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(CTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.CTSSender_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(CTSSender_sptr self) -> double"""
        return _lora_rts_cts_swig.CTSSender_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(CTSSender_sptr self) -> uint64_t"""
        return _lora_rts_cts_swig.CTSSender_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(CTSSender_sptr self) -> uint64_t"""
        return _lora_rts_cts_swig.CTSSender_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(CTSSender_sptr self) -> bool"""
        return _lora_rts_cts_swig.CTSSender_sptr_start(self)


    def stop(self) -> "bool":
        """stop(CTSSender_sptr self) -> bool"""
        return _lora_rts_cts_swig.CTSSender_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(CTSSender_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_rts_cts_swig.CTSSender_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(CTSSender_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_rts_cts_swig.CTSSender_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(CTSSender_sptr self, std::string level)"""
        return _lora_rts_cts_swig.CTSSender_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(CTSSender_sptr self) -> std::string"""
        return _lora_rts_cts_swig.CTSSender_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(CTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.CTSSender_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(CTSSender_sptr self, int m)"""
        return _lora_rts_cts_swig.CTSSender_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(CTSSender_sptr self)"""
        return _lora_rts_cts_swig.CTSSender_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(CTSSender_sptr self) -> bool"""
        return _lora_rts_cts_swig.CTSSender_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(CTSSender_sptr self, int m)"""
        return _lora_rts_cts_swig.CTSSender_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(CTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.CTSSender_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(CTSSender_sptr self, int i) -> long"""
        return _lora_rts_cts_swig.CTSSender_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(CTSSender_sptr self, long max_output_buffer)
        set_max_output_buffer(CTSSender_sptr self, int port, long max_output_buffer)
        """
        return _lora_rts_cts_swig.CTSSender_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(CTSSender_sptr self, int i) -> long"""
        return _lora_rts_cts_swig.CTSSender_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(CTSSender_sptr self, long min_output_buffer)
        set_min_output_buffer(CTSSender_sptr self, int port, long min_output_buffer)
        """
        return _lora_rts_cts_swig.CTSSender_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(CTSSender_sptr self, int which) -> float
        pc_input_buffers_full(CTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.CTSSender_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(CTSSender_sptr self, int which) -> float
        pc_input_buffers_full_avg(CTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.CTSSender_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(CTSSender_sptr self, int which) -> float
        pc_input_buffers_full_var(CTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.CTSSender_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(CTSSender_sptr self, int which) -> float
        pc_output_buffers_full(CTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.CTSSender_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(CTSSender_sptr self, int which) -> float
        pc_output_buffers_full_avg(CTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.CTSSender_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(CTSSender_sptr self, int which) -> float
        pc_output_buffers_full_var(CTSSender_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.CTSSender_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(CTSSender_sptr self) -> float"""
        return _lora_rts_cts_swig.CTSSender_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(CTSSender_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_rts_cts_swig.CTSSender_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(CTSSender_sptr self)"""
        return _lora_rts_cts_swig.CTSSender_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(CTSSender_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_rts_cts_swig.CTSSender_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(CTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.CTSSender_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(CTSSender_sptr self) -> int"""
        return _lora_rts_cts_swig.CTSSender_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(CTSSender_sptr self, int priority) -> int"""
        return _lora_rts_cts_swig.CTSSender_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(CTSSender_sptr self) -> std::string"""
        return _lora_rts_cts_swig.CTSSender_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(CTSSender_sptr self) -> std::string"""
        return _lora_rts_cts_swig.CTSSender_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(CTSSender_sptr self) -> io_signature_sptr"""
        return _lora_rts_cts_swig.CTSSender_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(CTSSender_sptr self) -> io_signature_sptr"""
        return _lora_rts_cts_swig.CTSSender_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(CTSSender_sptr self) -> long"""
        return _lora_rts_cts_swig.CTSSender_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(CTSSender_sptr self) -> basic_block_sptr"""
        return _lora_rts_cts_swig.CTSSender_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(CTSSender_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_rts_cts_swig.CTSSender_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(CTSSender_sptr self) -> std::string"""
        return _lora_rts_cts_swig.CTSSender_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(CTSSender_sptr self, std::string name)"""
        return _lora_rts_cts_swig.CTSSender_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(CTSSender_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_rts_cts_swig.CTSSender_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(CTSSender_sptr self) -> swig_pmt_ptr"""
        return _lora_rts_cts_swig.CTSSender_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(CTSSender_sptr self) -> swig_pmt_ptr"""
        return _lora_rts_cts_swig.CTSSender_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(CTSSender_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_rts_cts_swig.CTSSender_sptr_message_subscribers(self, which_port)

CTSSender_sptr_swigregister = _lora_rts_cts_swig.CTSSender_sptr_swigregister
CTSSender_sptr_swigregister(CTSSender_sptr)


CTSSender_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
CTSSender = CTSSender.make;

S_CAD_RESET = _lora_rts_cts_swig.S_CAD_RESET
S_CAD_DETECT = _lora_rts_cts_swig.S_CAD_DETECT
S_CAD_OUT = _lora_rts_cts_swig.S_CAD_OUT
class cadDetect(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_rts_cts::cadDetect.

    To avoid accidental use of raw pointers, lora_rts_cts::cadDetect's constructor is in a private implementation class. lora_rts_cts::cadDetect::make is the public interface for creating new instances.

    Args:
        sf : 
        sampRate : 
        bw : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sf: 'uint8_t', sampRate: 'uint32_t', bw: 'uint32_t') -> "gr::lora_rts_cts::cadDetect::sptr":
        """
        make(uint8_t sf, uint32_t sampRate, uint32_t bw) -> cadDetect_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_rts_cts::cadDetect.

        To avoid accidental use of raw pointers, lora_rts_cts::cadDetect's constructor is in a private implementation class. lora_rts_cts::cadDetect::make is the public interface for creating new instances.

        Args:
            sf : 
            sampRate : 
            bw : 
        """
        return _lora_rts_cts_swig.cadDetect_make(sf, sampRate, bw)

    make = staticmethod(make)
    __swig_destroy__ = _lora_rts_cts_swig.delete_cadDetect
    __del__ = lambda self: None
cadDetect_swigregister = _lora_rts_cts_swig.cadDetect_swigregister
cadDetect_swigregister(cadDetect)

def cadDetect_make(sf: 'uint8_t', sampRate: 'uint32_t', bw: 'uint32_t') -> "gr::lora_rts_cts::cadDetect::sptr":
    """
    cadDetect_make(uint8_t sf, uint32_t sampRate, uint32_t bw) -> cadDetect_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_rts_cts::cadDetect.

    To avoid accidental use of raw pointers, lora_rts_cts::cadDetect's constructor is in a private implementation class. lora_rts_cts::cadDetect::make is the public interface for creating new instances.

    Args:
        sf : 
        sampRate : 
        bw : 
    """
    return _lora_rts_cts_swig.cadDetect_make(sf, sampRate, bw)

class cadDetect_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora_rts_cts::cadDetect)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora_rts_cts::cadDetect)> self) -> cadDetect_sptr
        __init__(boost::shared_ptr<(gr::lora_rts_cts::cadDetect)> self, cadDetect p) -> cadDetect_sptr
        """
        this = _lora_rts_cts_swig.new_cadDetect_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::lora_rts_cts::cadDetect *":
        """__deref__(cadDetect_sptr self) -> cadDetect"""
        return _lora_rts_cts_swig.cadDetect_sptr___deref__(self)

    __swig_destroy__ = _lora_rts_cts_swig.delete_cadDetect_sptr
    __del__ = lambda self: None

    def make(self, sf: 'uint8_t', sampRate: 'uint32_t', bw: 'uint32_t') -> "gr::lora_rts_cts::cadDetect::sptr":
        """
        make(cadDetect_sptr self, uint8_t sf, uint32_t sampRate, uint32_t bw) -> cadDetect_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_rts_cts::cadDetect.

        To avoid accidental use of raw pointers, lora_rts_cts::cadDetect's constructor is in a private implementation class. lora_rts_cts::cadDetect::make is the public interface for creating new instances.

        Args:
            sf : 
            sampRate : 
            bw : 
        """
        return _lora_rts_cts_swig.cadDetect_sptr_make(self, sf, sampRate, bw)


    def history(self) -> "unsigned int":
        """history(cadDetect_sptr self) -> unsigned int"""
        return _lora_rts_cts_swig.cadDetect_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(cadDetect_sptr self, int which, int delay)
        declare_sample_delay(cadDetect_sptr self, unsigned int delay)
        """
        return _lora_rts_cts_swig.cadDetect_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(cadDetect_sptr self, int which) -> unsigned int"""
        return _lora_rts_cts_swig.cadDetect_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(cadDetect_sptr self, int multiple)"""
        return _lora_rts_cts_swig.cadDetect_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(cadDetect_sptr self) -> int"""
        return _lora_rts_cts_swig.cadDetect_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(cadDetect_sptr self) -> double"""
        return _lora_rts_cts_swig.cadDetect_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(cadDetect_sptr self) -> uint64_t"""
        return _lora_rts_cts_swig.cadDetect_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(cadDetect_sptr self) -> uint64_t"""
        return _lora_rts_cts_swig.cadDetect_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(cadDetect_sptr self) -> bool"""
        return _lora_rts_cts_swig.cadDetect_sptr_start(self)


    def stop(self) -> "bool":
        """stop(cadDetect_sptr self) -> bool"""
        return _lora_rts_cts_swig.cadDetect_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(cadDetect_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_rts_cts_swig.cadDetect_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(cadDetect_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_rts_cts_swig.cadDetect_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(cadDetect_sptr self, std::string level)"""
        return _lora_rts_cts_swig.cadDetect_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(cadDetect_sptr self) -> std::string"""
        return _lora_rts_cts_swig.cadDetect_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(cadDetect_sptr self) -> int"""
        return _lora_rts_cts_swig.cadDetect_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(cadDetect_sptr self, int m)"""
        return _lora_rts_cts_swig.cadDetect_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(cadDetect_sptr self)"""
        return _lora_rts_cts_swig.cadDetect_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(cadDetect_sptr self) -> bool"""
        return _lora_rts_cts_swig.cadDetect_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(cadDetect_sptr self, int m)"""
        return _lora_rts_cts_swig.cadDetect_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(cadDetect_sptr self) -> int"""
        return _lora_rts_cts_swig.cadDetect_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(cadDetect_sptr self, int i) -> long"""
        return _lora_rts_cts_swig.cadDetect_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(cadDetect_sptr self, long max_output_buffer)
        set_max_output_buffer(cadDetect_sptr self, int port, long max_output_buffer)
        """
        return _lora_rts_cts_swig.cadDetect_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(cadDetect_sptr self, int i) -> long"""
        return _lora_rts_cts_swig.cadDetect_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(cadDetect_sptr self, long min_output_buffer)
        set_min_output_buffer(cadDetect_sptr self, int port, long min_output_buffer)
        """
        return _lora_rts_cts_swig.cadDetect_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(cadDetect_sptr self, int which) -> float
        pc_input_buffers_full(cadDetect_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.cadDetect_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(cadDetect_sptr self, int which) -> float
        pc_input_buffers_full_avg(cadDetect_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.cadDetect_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(cadDetect_sptr self, int which) -> float
        pc_input_buffers_full_var(cadDetect_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.cadDetect_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(cadDetect_sptr self, int which) -> float
        pc_output_buffers_full(cadDetect_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.cadDetect_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(cadDetect_sptr self, int which) -> float
        pc_output_buffers_full_avg(cadDetect_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.cadDetect_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(cadDetect_sptr self, int which) -> float
        pc_output_buffers_full_var(cadDetect_sptr self) -> pmt_vector_float
        """
        return _lora_rts_cts_swig.cadDetect_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(cadDetect_sptr self) -> float"""
        return _lora_rts_cts_swig.cadDetect_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(cadDetect_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_rts_cts_swig.cadDetect_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(cadDetect_sptr self)"""
        return _lora_rts_cts_swig.cadDetect_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(cadDetect_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_rts_cts_swig.cadDetect_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(cadDetect_sptr self) -> int"""
        return _lora_rts_cts_swig.cadDetect_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(cadDetect_sptr self) -> int"""
        return _lora_rts_cts_swig.cadDetect_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(cadDetect_sptr self, int priority) -> int"""
        return _lora_rts_cts_swig.cadDetect_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(cadDetect_sptr self) -> std::string"""
        return _lora_rts_cts_swig.cadDetect_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(cadDetect_sptr self) -> std::string"""
        return _lora_rts_cts_swig.cadDetect_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(cadDetect_sptr self) -> io_signature_sptr"""
        return _lora_rts_cts_swig.cadDetect_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(cadDetect_sptr self) -> io_signature_sptr"""
        return _lora_rts_cts_swig.cadDetect_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(cadDetect_sptr self) -> long"""
        return _lora_rts_cts_swig.cadDetect_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(cadDetect_sptr self) -> basic_block_sptr"""
        return _lora_rts_cts_swig.cadDetect_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(cadDetect_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_rts_cts_swig.cadDetect_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(cadDetect_sptr self) -> std::string"""
        return _lora_rts_cts_swig.cadDetect_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(cadDetect_sptr self, std::string name)"""
        return _lora_rts_cts_swig.cadDetect_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(cadDetect_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_rts_cts_swig.cadDetect_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(cadDetect_sptr self) -> swig_pmt_ptr"""
        return _lora_rts_cts_swig.cadDetect_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(cadDetect_sptr self) -> swig_pmt_ptr"""
        return _lora_rts_cts_swig.cadDetect_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(cadDetect_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_rts_cts_swig.cadDetect_sptr_message_subscribers(self, which_port)

cadDetect_sptr_swigregister = _lora_rts_cts_swig.cadDetect_sptr_swigregister
cadDetect_sptr_swigregister(cadDetect_sptr)


cadDetect_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cadDetect = cadDetect.make;



